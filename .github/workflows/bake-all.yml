name: "Build All Standard Supports"
run-name: >
  Build by @${{ github.actor }} with ${{
    (github.event_name == 'workflow_dispatch' && github.event.inputs.trigger_source) ||
    (github.event_name == 'repository_dispatch' && github.event.client_payload.trigger_source) ||
    'manual'
  }}
  (Release: ${{
    (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) || 'N/A'
  }})

on:

  repository_dispatch:
    types: [trigger-bake-all]

  workflow_dispatch:
    inputs:
      skip_images:
        description: 'Skip building images? no = build images, yes = skip images'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      check_oci:
        description: 'Check OCI for existing artifacts? yes = check OCI, no = always build everything'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      extra_params:
        description: 'Extra params for all builds/jobs (prepare/artifact/image) (eg: DEBUG=yes)'
        required: false
        default: ''
        type: string

      branch:
        type: choice
        description: 'Framework build branch'
        required: false
        options:
        - armbian
        - main
        default: 'armbian'

      board:
        type: choice
        description: 'Board'
        required: false
        options:
        - orangepi5-plus
        default: 'all'

      maintainer:
        type: choice
        description: 'Maintainer'
        required: false
        options:
        - diverger
        default: 'all'

      targets_filter_incs:
        description: 'Optional filter for targets to include (e.g., board name). Leave empty for all.'
        required: false
        default: ''
        type: string

      nightly:
        description: 'yes = nightly, no = stable'
        required: false
        options: [ 'yes', 'no' ]
        type: choice
        default: 'no'

      armbian_version:
        description: 'The version of Armbian build framework'
        required: false
        default: ''

env:
  BUILD_REPOSITORY: "diverger/armbian-build"

  BUILD_REF: >
    ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.armbian_ref ||
    github.event.inputs.branch || 'armbian' }}

  USERPATCHES_REPOSITORY: "armbian/os"
  USERPATCHES_REF: "main"
  USERPATCHES_DIR: "userpatches"
  # only used for nightly builds, and for 'community' and 'distribution' releases
  RELEASE_REPOSITORY: "armbian-baker"
  DOCKER_SKIP_UPDATE: "yes"
  EXTRA_PARAMS_ALL_BUILDS: "${{ inputs.extra_params || 'UPLOAD_TO_OCI_ONLY=yes' }}"

  ARMBIAN_VERSION: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.armbian_version) || (github.event_name == 'repository_dispatch' && github.event.client_payload.armbian_version) || '' }}

  GH_TOKEN: "${{ secrets.GH_ACCESS_TOKEN }}"
  EXTRA_PARAMS_IMAGE: "SHARE_LOG=no "

  RELEASE_TAG: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) || '' }}
  RELEASE_ID: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.release_id) || '' }}
  CUSTOM_REF: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.custom_ref) || 'main' }}
  TARGETS_FILE: ${{ (github.event_name == 'repository_dispatch' && github.event.client_payload.targets_file) || 'targets-diverger-stable.yml' }}

  NIGHTLY_BUILD: >
    ${{
      (github.event_name == 'repository_dispatch' && github.event.client_payload.nightly) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.nightly)
    }}

concurrency:
  group: diverger-standard-support
  cancel-in-progress: false

jobs:

  version_prep:
    name: "Determine version"
    if: ${{ github.repository_owner == 'diverger' && github.actor == 'diverger' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default

      - name: Get Armbian version
        run: |
          mkdir -p downloads

          echo "Armbian version: $ARMBIAN_VERSION"

          _EFFECTIVE_ARMBIAN_VERSION=""
          if [ -z "$ARMBIAN_VERSION" ]; then
            echo "Workflow ARMBIAN_VERSION env is empty. Reading from stable.json."
            _EFFECTIVE_ARMBIAN_VERSION=$(jq -r '.version' stable.json)
          else
            echo "Using ARMBIAN_VERSION from workflow env: $ARMBIAN_VERSION"
            _EFFECTIVE_ARMBIAN_VERSION="$ARMBIAN_VERSION"
          fi

          echo "Final ARMBIAN_VERSION determined: $_EFFECTIVE_ARMBIAN_VERSION"

          # Set it for subsequent steps in this job and for job outputs (via ${{ env.ARMBIAN_VERSION }})
          echo "ARMBIAN_VERSION=$_EFFECTIVE_ARMBIAN_VERSION" >> $GITHUB_ENV

          # Create the version artifact
          echo "$_EFFECTIVE_ARMBIAN_VERSION" > downloads/version

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: assets-for-download-${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}
          path: downloads
          retention-days: 5

      - name: 'Make release tag'
        id: make_release_tag
        run: |
          if [ -z "$RELEASE_TAG" ]; then
            echo "RELEASE_TAG=$(TZ='Asia/Shanghai' date +"%Y-%m-%d-%H-%M-%S")" >> $GITHUB_ENV
          fi

      # Note: The officital version will create a pre-release here, for nightly build and image not skipped
      # we don't need it here

      - name: Save
        id: releases
        run: |
          echo "version=${{ env.ARMBIAN_VERSION }}" >> $GITHUB_OUTPUT
          echo "release_tag=${{ env.RELEASE_TAG }}" >> $GITHUB_OUTPUT

    outputs:

      # not related to matrix
      version: ${{ steps.releases.outputs.version }}
      release_tag: ${{ steps.releases.outputs.release_tag }}

  matrix_prep:
    name: "JSON matrix: 4/4 :: 4 artifact chunks, 4 image chunks"
    if: ${{ github.repository.owner == 'diverger' }} && ${{ github.actor == 'diverger' }}
    needs: [ version_prep ]
    runs-on: ubuntu-latest
    steps:

      # clean runners, self-hosted, or GitHub's
      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ env.BUILD_REF }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0
          clean: false
          path: build

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false
          path: userpatches

      - name: "grab the sha1 of the latest commit of the build repo ${{ env.BUILD_REPOSITORY }}#${{ env.BUILD_REF }}"
        id: latest-commit
        run: |
          cd build
          echo "sha1=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          cd ..

      - name: "Checkout customizations"
        uses: actions/checkout@v4
        with:
          repository: diverger/armbian-custom
          token: ${{ env.GH_TOKEN }}
          ref: ${{ env.CUSTOM_REF }}
          fetch-depth: 0
          clean: false
          path: custom

      - name: Put userpatches in place
        run: |
          mkdir -pv build/userpatches
          rsync -av userpatches/${{env.USERPATCHES_DIR}}/. build/userpatches/
          rsync -av custom/userpatches/. build/userpatches/

      - name: GitHub cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            cache/memoize
            cache/oci/positive
          key: ${{ runner.os }}-matrix-cache-${{ github.sha }}-${{ steps.latest-commit.outputs.sha1 }}"
          restore-keys: |
            ${{ runner.os }}-matrix-cache-

      # Login to ghcr.io, we're gonna do a lot of OCI lookups.
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}" # GitHub username or org
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub actions builtin token. repo has to have pkg access.

      - name: Prepare Info JSON and Matrices
        id: prepare-matrix
        run: |

          FILTERS="${{ github.event.inputs.targets_filter_incs }}"

          if [ -z "${FILTERS}" ] && [ "${{ github.event.inputs.board }}" != "all" ] && [ -n "${{ github.event.inputs.board }}" ]; then
              FILTERS='"BOARD:${{ github.event.inputs.board }}"'
          fi

          # if [ -z "${FILTERS}" ] && [ "${{ github.event.inputs.maintainer }}" != "all" ] && [ -n "${{ github.event.inputs.board }}" ]; then
          #     FILTERS='"BOARD_MAINTAINERS:${{ github.event.inputs.maintainer }}"'
          # fi

          cd build
          bash ./compile.sh gha-matrix armbian-images \
            REVISION="${{ needs.version_prep.outputs.version }}" \
            BETA=no \
            CLEAN_INFO=yes \
            CLEAN_MATRIX=yes \
            MATRIX_ARTIFACT_CHUNKS=4 \
            MATRIX_IMAGE_CHUNKS=4 \
            CHECK_OCI=${{ env.NIGHTLY_BUILD == 'yes' &&  'yes' || github.event.inputs.check_oci }} \
            TARGETS_FILENAME=${{ env.TARGETS_FILE }} \
            SKIP_IMAGES=${{ github.event.inputs.skip_images || 'no'}} \
            ${{env.EXTRA_PARAMS_ALL_BUILDS}} SHARE_LOG=no

      - name: "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.prepare-matrix.outputs.logs_url }}"

      # Store output/info folder in a GitHub Actions artifact
      - uses: actions/upload-artifact@v4
        name: Upload output/info as GitHub Artifact
        with:
          name: build-info-json
          path: build/output/info

      - name: chown cache memoize/oci back to normal user
        run: sudo chown -R $USER:$USER build/cache/memoize build/cache/oci/positive

    outputs:
      # not related to matrix
      build-sha1: ${{ steps.latest-commit.outputs.sha1 }}
      version: ${{ needs.version_prep.outputs.version }}
      release_tag: ${{ needs.version_prep.outputs.release_tag }}

      artifacts-chunk-json-1: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-1 }}
      artifacts-chunk-not-empty-1: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-1 }}
      artifacts-chunk-json-2: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-2 }}
      artifacts-chunk-not-empty-2: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-2 }}
      artifacts-chunk-json-3: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-3 }}
      artifacts-chunk-not-empty-3: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-3 }}
      artifacts-chunk-json-4: ${{ steps.prepare-matrix.outputs.artifacts-chunk-json-4 }}
      artifacts-chunk-not-empty-4: ${{ steps.prepare-matrix.outputs.artifacts-chunk-not-empty-4 }}
      images-chunk-json-1: ${{ steps.prepare-matrix.outputs.images-chunk-json-1 }}
      images-chunk-not-empty-1: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-1 }}
      images-chunk-json-2: ${{ steps.prepare-matrix.outputs.images-chunk-json-2 }}
      images-chunk-not-empty-2: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-2 }}
      images-chunk-json-3: ${{ steps.prepare-matrix.outputs.images-chunk-json-3 }}
      images-chunk-not-empty-3: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-3 }}
      images-chunk-json-4: ${{ steps.prepare-matrix.outputs.images-chunk-json-4 }}
      images-chunk-not-empty-4: ${{ steps.prepare-matrix.outputs.images-chunk-not-empty-4 }}

      # template file: 250.single_aggr-jobs.yaml

  # ------ aggregate all artifact chunks into a single dependency -------

  all-artifacts-ready:
    name: "4 artifacts chunks ready"
    runs-on: ubuntu-latest # not going to run, anyway, but is required.
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs: [ "matrix_prep", "build-artifacts-chunk-1","build-artifacts-chunk-2","build-artifacts-chunk-3","build-artifacts-chunk-4"] # <-- HERE: all artifact chunk numbers.
    steps:
      - name: fake step
        run: uptime

  all-images-ready:
    name: "4 image chunks ready"
    runs-on: ubuntu-latest # not going to run, anyway, but is required.
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs: [ "matrix_prep", "build-images-chunk-1","build-images-chunk-2","build-images-chunk-3","build-images-chunk-4" ] # <-- HERE: all image chunk numbers.
    steps:
      - name: fake step
        run: uptime

  all-artifacts-and-images-ready:
    name: "4 artifacts and 4 image chunks ready"
    runs-on: ubuntu-latest # not going to run, anyway, but is required.
    if: ${{ !cancelled() && ( 1 == 2 ) }} # eg: never run.
    needs: [ "matrix_prep", "all-artifacts-ready", "all-images-ready" ]
    steps:
      - name: fake step
        run: uptime

  build-artifacts-chunk-1:
    if: ${{ github.repository_owner == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-1 == 'yes' }}
    needs: [ matrix_prep ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-1) }}
    name: ${{ matrix.desc || 'Empty A1' }} # <-- HERE: Chunk number.
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}" # GitHub username or org
          password: "${{ secrets.GITHUB_TOKEN }}"    # GitHub actions builtin token. repo has to have pkg access.

      # cleanup the place where we will clone the userpatches repo, to avoid git going insane and cleaning everything later
      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default.
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build  ${{matrix.desc}}
        timeout-minutes: 180
        id: build
        run: |
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" SHOW_DEBUG=yes SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-2:
    if: ${{ github.repository_owner == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-2 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-2) }}
    name: ${{ matrix.desc || 'Empty A2' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build  ${{matrix.desc}}
        timeout-minutes: 180
        id: build
        run: |
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" SHOW_DEBUG=yes SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-3:
    if: ${{ github.repository_owner == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-3 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-3) }}
    name: ${{ matrix.desc || 'Empty A3' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build  ${{matrix.desc}}
        timeout-minutes: 180
        id: build
        run: |
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" SHOW_DEBUG=yes SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-artifacts-chunk-4:
    if: ${{ github.repository_owner == 'diverger' && needs.matrix_prep.outputs.artifacts-chunk-not-empty-4 == 'yes' }}
    needs: [ matrix_prep ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.artifacts-chunk-json-4) }}
    name: ${{ matrix.desc || 'Empty A4' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build  ${{matrix.desc}}
        timeout-minutes: 180
        id: build
        run: |
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" SHOW_DEBUG=yes SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build.outputs.logs_url }}"

  build-images-chunk-1:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.repository_owner == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-1 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-1) }}
    name: ${{ matrix.desc || 'Empty I1' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # cleanup the place where we will clone the userpatches repo, to avoid git going insane and cleaning everything later
      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false # true is default.
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          # calculate loop from runner name
          if [ -z "${ImageOS}" ]; then
          USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.version }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      # Download the artifacts (output/info) produced by the prepare-matrix job.
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.version }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-${{ matrix.id }}.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-${{ matrix.id }}.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: oss-urls-${{ matrix.desc || matrix.id || 'Empty I1' }}
          path: oss-urls/image-urls-${{ matrix.id }}.txt

  build-images-chunk-2:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.repository_owner == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-2 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-2) }}
    name: ${{ matrix.desc || 'Empty I2' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
          USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.version }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.version }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-${{ matrix.id }}.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-${{ matrix.id }}.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: oss-urls-${{ matrix.desc || matrix.id || 'Empty I2' }}
          path: oss-urls/image-urls-${{ matrix.id }}.txt

  build-images-chunk-3:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.repository_owner == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-3 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-3) }}
    name: ${{ matrix.desc || 'Empty I3' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
          USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.version }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.version }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-${{ matrix.id }}.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-${{ matrix.id }}.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: oss-urls-${{ matrix.desc || matrix.id || 'Empty I3' }}
          path: oss-urls/image-urls-${{ matrix.id }}.txt

  build-images-chunk-4:
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    timeout-minutes: 240
    if: ${{ !failure() && !cancelled() && ( github.repository_owner == 'diverger' ) && ( needs.matrix_prep.outputs.images-chunk-not-empty-4 == 'yes' ) }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix_prep.outputs.images-chunk-json-4) }}
    name: ${{ matrix.desc || 'Empty I4' }}
    runs-on: ${{ matrix.runs_on }}
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false

      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: ${{ matrix.fdepth }}
          clean: false
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          rm -rf userpatches.repo

      - name: "Cleanup leftover output"
        run: |
          rm -f userpatches/VERSION

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: ${{matrix.desc}}
        id: build-one-image
        timeout-minutes: 120
        run: |
          if [ -z "${ImageOS}" ]; then
          USE_FIXED_LOOP_DEVICE=$(echo ${RUNNER_NAME} | rev | cut -d"-" -f1  | rev | sed 's/^0*//' | sed -e 's/^/\/dev\/loop/')
          fi
          bash ./compile.sh ${{ matrix.invocation }} REVISION="${{ needs.matrix_prep.outputs.version }}" USE_FIXED_LOOP_DEVICE="$USE_FIXED_LOOP_DEVICE" SHARE_LOG=no MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.version }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: "Logs: ${{ steps.build-one-image.outputs.logs_url }}"
        if: always()
        run: |
          echo "Logs: ${{ steps.build-one-image.outputs.logs_url }}"

      - name: Import GPG key
        env:
          GPG_KEY1: ${{ secrets.GPG_KEY }}
        if: env.GPG_KEY1 != null
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Sign
        env:
          GPG_KEY_PASSPHRASE: ${{ secrets.GPG_KEY_PASSPHRASE }}
        if: env.GPG_KEY_PASSPHRASE != null
        run: |

          for extension in zip xz qcow2; do
            if ls -l output/images/*/archive/*.$extension &>/dev/null; then
              echo ${{ secrets.GPG_KEY_PASSPHRASE }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes output/images/*/archive/*.$extension
            fi
          done

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-info-json
          path: output/info

      # Note: The officail version will upload the nightly building artifacts to GitHub space, but stable building artfacts to server
      # Upload to OSS
      - name: Upload to OSS
        timeout-minutes: 60
        # if: ${{ env.NIGHTLY_BUILD == 'no' && env.RELEASE_REPOSITORY == 'armbian-baker' }}
        id: upload_to_oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          assets: |
            ./output/images/**:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.version }}/

      - name: Report OSS uploading status
        if: ${{ steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url }}
        shell: bash
        run: |
          OSS_URL="${{ steps.upload_to_oss.outputs.url }}"
          echo "Successfully uploaded to OSS. URL: ${OSS_URL}"
          mkdir -p oss-urls
          echo "${OSS_URL}" >> "oss-urls/image-urls-${{ matrix.id }}.txt"
          echo "OSS URL has been appended to oss-urls/image-urls-${{ matrix.id }}.txt"

      - name: Upload OSS URL
        if: ${{ always() && ( steps.upload_to_oss.conclusion == 'success' && steps.upload_to_oss.outputs.url )}}
        uses: actions/upload-artifact@v4
        with:
          name: "oss-urls-${{ matrix.desc || matrix.id || 'Empty I4' }}"
          path: "oss-urls/image-urls-${{ matrix.id }}.txt"

# template file: 750.single_repo.yaml

  # ------ publish packages to repository -------

  publish-debs-to-repo:
    name: "Download artifacts from ORAS cache"
    runs-on: ubuntu-latest
    # This will run in non-test mode
    if: ${{ !failure() && !cancelled() && github.event.client_payload.custom_ref == '' }}
    needs: [ "matrix_prep", "all-artifacts-ready" ]
    steps:

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      # Login to ghcr.io, for later uploading rootfs to ghcr.io
      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}" # GitHub username or org
          password: "${{ secrets.GITHUB_TOKEN }}"    # GitHub actions builtin token. repo has to have pkg access.

      # cleanup the place where we will clone the userpatches repo, to avoid git going insane and cleaning everything later
      - name: Cleanup userpatches repo
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: rm -rf userpatches.repo

      - name: Checkout build repo
        uses: actions/checkout@v4 # We don't need to clone git, really. A wget would suffice for GH-hosted runners. But using clone is better for Igor-hosted runners.
        with:
          repository: ${{ env.BUILD_REPOSITORY }}
          ref: ${{ needs.matrix_prep.outputs.build-sha1 }}
          token: ${{ env.GH_TOKEN }}
          fetch-depth: 0
          clean: false # true is default. it *will* delete the hosts /dev if mounted inside.

      # clone the userpatches repo (`armbian/os`)
      - name: "Checkout userpatches repo: ${{env.USERPATCHES_REPOSITORY}}#${{env.USERPATCHES_REF}}"
        uses: actions/checkout@v4
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        with:
          repository: ${{ env.USERPATCHES_REPOSITORY }}
          ref: ${{ env.USERPATCHES_REF }}
          fetch-depth: 0
          clean: false # true is default.
          path: userpatches.repo

      - name: "Put userpatches in place, and remove userpatches repo"
        if: ${{ ( env.USERPATCHES_REPOSITORY != '' ) && ( env.USERPATCHES_REF != '' ) }}
        run: |
          mkdir -pv userpatches
          rsync -av userpatches.repo/${{env.USERPATCHES_DIR}}/. userpatches/
          #rm -rf userpatches.repo

      # Clean off output/info, if any
      # Clean off debs and debs-beta
      - name: Cleanup output/info
        run: |
          rm -rfv output/info output/debs output/debs-beta
          mkdir -pv output

      # Download the artifacts (output/info) produced by the prepare-matrix job.
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-info-json
          path: output/info

      # List the artifacts we downloaded
      - name: List artifacts
        run: |
          ls -laht output/info

      - name: Download the debs
        id: download-debs
        run: |
          bash ./compile.sh debs-to-repo-download REVISION="${{ needs.matrix_prep.outputs.version }}" BETA=${{ env.NIGHTLY_BUILD || 'no' }} SHARE_LOG=no ${{env.EXTRA_PARAMS_ALL_BUILDS}}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: Fix permissions
        run: |
          sudo chown -R $USER:$USER output/.

      # Upload the parts too
      - name: Upload to oss
        timeout-minutes: 60
        if: ${{ (github.event.inputs.skip_images || 'no') == 'no' }}
        id: upload_to_oss
        uses: tvrcgo/oss-action@master
        with:
          key-id: ${{ secrets.OSS_KEY_ID }}
          key-secret: ${{ secrets.OSS_KEY_SECRET }}
          region: ${{ secrets.OSS_REGION }}
          bucket: ${{ secrets.OSS_BUCKET }}
          assets: ./output/debs***:/armbian/${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}/${{ needs.matrix_prep.outputs.release_tag }}/${{ needs.matrix_prep.outputs.version }}/partial/

      # TODO: In official version, next will inform the armbian/os repo to update the repository, what should we do?

      - name: "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"
        run: |
          echo "Logs debs-to-repo-download: ${{ steps.download-debs.outputs.logs_url }}"

    outputs:

      # not related to matrix
      version: ${{ needs.matrix_prep.outputs.version }}

# template file: 950.single_footer.yaml

  # ------ aggregate all artifact chunks into a single dependency -------

  closing:
    name: "Footer"
    runs-on: ubuntu-latest
    if: >
      ${{
        !failure() && !cancelled() &&
        ((github.event_name == 'workflow_dispatch' && github.event.inputs.nightly == 'yes') ||
        (github.event_name == 'repository_dispatch' && github.event.client_payload.custom_ref == '' && github.event.client_payload.nightly == 'yes'))}}

    needs: [ "matrix_prep", "all-artifacts-ready", "all-images-ready" ]
    steps:

      - uses: geekyeggo/delete-artifact@v5
        with:
          name: assets-for-download-${{ env.NIGHTLY_BUILD == 'yes' && 'nightly' || 'stable' }}
          failOnError: false

      # For now, we won't build image files for nightly builds
      # Cleaning logs
      - name: "Keep only 7 days of workflow logs"
        uses: igorjs/gh-actions-clean-workflow@v6
        with:
          token: ${{ env.GH_TOKEN }}
          runs_older_than: 7 # optional
          runs_to_keep: 0 # optional

  release:
    name: "Release"
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() && (github.event_name == 'repository_dispatch' && github.event.client_payload.release_tag) }}
    needs: [ "matrix_prep", "all-artifacts-ready", "all-images-ready" ]
    steps:

      - name: "Generate release stamp"
        id: release_stamp
        run: |
          echo "Release version: ${{ needs.matrix_prep.outputs.release_tag }}" >> release.txt
          echo "Armbian version: ${{ needs.matrix_prep.outputs.version }}" >> release.txt

      - name: Download all OSS URL artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: oss-urls-*
          merge-multiple: true
          path: combined-oss-urls

      - name: Combine all OSS URLs
        run: |
          mkdir -p oss-urls
          cat combined-oss-urls/* > oss-urls/image-urls.txt
          echo "Combined OSS URLs into oss-urls/image-urls.txt"

      # - name: Publish to Github Releases
      #   uses: xresloader/upload-to-github-release@v1

      #   with:
      #     release_id: ${{ env.RELEASE_ID }}
      #     target_owner: ${{ github.repository_owner }}
      #     target_repo: armbian-custom
      #     branches: main
      #     token: ${{ env.GH_TOKEN }}
      #     overwrite: true
      #     file: "release.txt;oss-urls/image-urls.txt"
      #     verbose: true

      - name: Publish to GitHub release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.GH_TOKEN }}
          owner: ${{ github.repository_owner }}
          repo: 'armbian-custom'
          tag: ${{ env.RELEASE_TAG }}
          artifacts: 'release.txt,oss-urls/image-urls.txt'
          artifactContentType: 'text/plain'
          allowUpdates: true
          replacesArtifacts: true
          omitBodyDuringUpdate: true
          omitBody: true
          omitName: true
          makeLatest: false
          omitPrereleaseDuringUpdate: true
          # omitDraftDuringUpdate: true
          # This will force the updated version to draft status
          draft: true

