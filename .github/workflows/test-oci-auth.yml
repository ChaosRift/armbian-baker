name: "Test OCI Authentication"

on:
  workflow_dispatch:
    inputs:
      target_config:
        description: 'Target configuration to test (e.g., rockchip64-current-minimal)'
        required: false
        default: 'rockchip64-current-minimal'
        type: string

env:
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
  GHCR_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:
  test-oci-auth:
    name: "Test OCI Authentication"
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'armbian' }}

    steps:
      - name: Checkout Armbian Build Framework
        uses: actions/checkout@v4
        with:
          repository: armbian/build
          ref: main
          path: build
          clean: false

      - name: "Set up Python environment"
        run: |
          cd build
          pip3 install --break-system-packages -r requirements.txt

      - name: "Test OCI Authentication with Single Target"
        run: |
          cd build

          # Create a minimal targets file for testing
          echo '[{
            "config_ok": true,
            "out": {
              "artifact_full_oci_target": "ghcr.io/armbian/cache:arm64-v6.6.57-current-rockchip64"
            }
          }]' > test_targets.json

          # Test the OCI authentication with our fixed script
          echo "=== Testing OCI Authentication ==="
          echo "GHCR_TOKEN present: $([ -n "$GHCR_TOKEN" ] && echo 'YES' || echo 'NO')"
          echo "GHCR_TOKEN length: ${#GHCR_TOKEN}"
          echo "Python version: $(python3 --version)"
          echo "ORAS module version: $(python3 -c 'import oras; print(oras.__version__)' 2>/dev/null || echo 'Not available')"

          # Run the mapper with OCI checking enabled
          echo "=== Running OCI Mapper ==="
          python3 lib/tools/info/mapper-oci-uptodate.py test_targets.json yes

          echo "=== OCI Authentication Test Completed ==="

      - name: "Test with Debug Logging"
        run: |
          cd build

          echo "=== Testing with Debug Logging ==="
          # Test with debug logging enabled
          DEBUG=yes python3 lib/tools/info/mapper-oci-uptodate.py test_targets.json yes

      - name: "Test Authentication Edge Cases"
        run: |
          cd build

          echo "=== Testing Authentication Edge Cases ==="
          
          # Test with an image that definitely doesn't exist to see auth vs not_found behavior
          echo '[{
            "config_ok": true,
            "out": {
              "artifact_full_oci_target": "ghcr.io/armbian/cache:nonexistent-test-image-$(date +%s)"
            }
          }]' > test_nonexistent.json

          echo "Testing with nonexistent image:"
          python3 lib/tools/info/mapper-oci-uptodate.py test_nonexistent.json yes || echo "Expected failure for nonexistent image"

      - name: "Verify Authentication Improvements"
        run: |
          cd build

          echo "=== Checking for Docker Config Creation ==="
          ls -la ~/.docker/ || echo "No Docker config directory found"

          if [ -f ~/.docker/config.json ]; then
            echo "Docker config file created successfully"
            echo "Config structure:"
            jq '.auths | keys' ~/.docker/config.json || echo "Could not parse config"
          else
            echo "No Docker config file found (expected if GHCR_TOKEN not available)"
          fi
